(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var lib_simulation_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lib-simulation-wasm */ \"./node_modules/lib-simulation-wasm/lib_simulaition_wasm.js\");\n// import * as wasm from \"hello-wasm-pack\";\n\n// import Chart from 'chart.js';\n// alert(\"Who's that dog?\" + sim.whos_that_dog() + \"!\");\nconst simulation = new lib_simulation_wasm__WEBPACK_IMPORTED_MODULE_0__[\"Simulation\"]();\n// document.getElementById(\"viewport\").setAttribute(\"content\", \"width=1024, initial-scale=0, maximum-scale=1.0, minimum-scale=0.25, user-scalable=yes\");\n\n/** @type {HTMLCanvasElement} */\nconst viewport = document.getElementById(\"viewport\");\n\n\nconst ctxt = viewport.getContext('2d');\nconst viewportWidth = viewport.width;\nconst viewportHight = viewport.height;\nlet minimum_acc = []\nlet average_acc = []\nlet maximum_acc = []\nlet labels = []\nlet generation = 1;\n\nCanvasRenderingContext2D.prototype.drawCircle =\n    function (x, y, radius) {\n        ctxt.fillStyle = 'rgb(116, 211, 174)';\n\n        this.beginPath();\n        this.arc(x, y, radius, 0, 2.0 * Math.PI);\n        this.fill();\n\n    };\n\n// function parse(stats) {\n//     // let values = stats\n// }\n\nlet ctx = document.getElementById('myChart').getContext('2d');\nlet chart = new Chart(ctx, {\n    type: 'line',\n\n    data: {\n        labels: labels,\n        datasets: [{\n            label: 'Minimum',\n            data: minimum_acc,\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            borderColor: 'rgba(255, 99, 132, 1)',\n            borderWidth: 2\n        },\n        {\n            label: 'Maximum',\n            data: maximum_acc,\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\n            borderColor: 'rgba(54, 162, 235, 1)',\n            borderWidth: 2\n        },\n        {\n            label: 'Average',\n            data: average_acc,\n            backgroundColor: 'rgba(255, 206, 86, 0.2)',\n            borderColor: 'rgba(255, 206, 86, 1)',\n            borderWidth: 2\n        }]\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n        yAxes: [{\n            ticks: {\n                beginAtZero: true\n            }\n        }]\n    }\n});\ndocument.getElementById(\"gener\").innerText = generation;\nlet statsistic = \"Updating value in a while\";\ndocument.getElementById('train').onclick = function () {\n    statsistic = simulation.train();\n    let result = parse();\n    generation += 10;\n    document.getElementById(\"gener\").innerText = generation\n    document.getElementById('min').innerText = result[0];\n    document.getElementById('max').innerText = result[1];\n    document.getElementById('avg').innerText = result[2];\n    chart.data.datasets[0].data = minimum_acc;\n    chart.data.datasets[1].data = maximum_acc;\n    chart.data.datasets[2].data = average_acc;\n    labels.push(minimum_acc.length);\n    chart.update();\n}\n\n\nCanvasRenderingContext2D.prototype.drawArc = function (x, y, radius, angleFrom, angleTo, style) {\n\n    radius *= viewportWidth;\n\n    this.beginPath();\n    this.arc(x, y, radius, angleFrom, angleTo);\n    this.strokeStyle = style;\n    this.lineWidth = 0.002 * viewportWidth;\n    this.stroke();\n};\n\n\nCanvasRenderingContext2D.prototype.drawTriangle = function (x, y, size, rotation) {\n    this.beginPath();\n    this.fillStyle = 'rgb(234, 190, 124)';\n    this.moveTo(\n        x - Math.sin(rotation) * size,\n        y + Math.cos(rotation) * size,\n    );\n\n    this.lineTo(\n        x - Math.sin(rotation + 2.0 / 3.0 * Math.PI) * size,\n        y + Math.cos(rotation + 2.0 / 3.0 * Math.PI) * size,\n    );\n\n    this.lineTo(\n        x - Math.sin(rotation + 4.0 / 3.0 * Math.PI) * size,\n        y + Math.cos(rotation + 4.0 / 3.0 * Math.PI) * size,\n    );\n\n    this.lineTo(\n        x - Math.sin(rotation) * size,\n        y + Math.cos(rotation) * size,\n    );\n\n    this.stroke();\n    this.fill();\n};\n\n\nlet step_count = 0;\n\nfunction redraw() {\n    ctxt.clearRect(0, 0, viewportWidth, viewportHight);\n    simulation.step();\n    step_count += 1;\n    if (step_count % 2500 == 0) {\n        generation += 1;\n        step_count = 0;\n    }\n\n    for (const food of simulation.world().foods) {\n        ctxt.drawCircle(\n            food.x * viewportWidth,\n            food.y * viewportHight,\n            (0.01 / 2.0) * viewportWidth\n        )\n    }\n\n    for (const animal of simulation.world().animals) {\n\n        console.log(animal.current_vision);\n        // console.log(animal)\n        ctxt.drawTriangle(\n            animal.x * viewportWidth,\n            animal.y * viewportHight,\n            0.01 * viewportWidth,\n            animal.rotation\n        );\n        //         const FOV_RANGE: f32 = 0.25;\n\n        // const FOV_ANGLE: f32 = PI + FRAC_PI_4;\n\n        // const CELLS: usize = 9;\n\n        const anglePerCell = (Math.PI + Math.PI / 4) / 9;\n\n        for (let cellId = 0; cellId < 9; cellId += 1) {\n            const angleFrom =\n                animal.rotation\n                - 225 / 2.0\n                + cellId * anglePerCell\n                + Math.PI / 2.0;\n\n            const angleTo = angleFrom + anglePerCell;\n            const energy = animal.current_vision[cellId];\n\n            ctxt.drawArc(\n                animal.x * viewportWidth,\n                animal.y * viewportHight,\n                0.01 * 2.5,\n                angleFrom,\n                angleTo,\n                `rgba(0, 255, 128, ${energy})`,\n            );\n        }\n    }\n    requestAnimationFrame(redraw);\n}\nredraw();\n\n\n\n\n\nfunction parse() {\n    let values = statsistic.split(',');\n    let min = Number(values[0].split('=')[1]);\n    let max = Number(values[1].split('=')[1]);\n    let avg = Number(values[2].split('=')[1]);\n    minimum_acc.push(min);\n    maximum_acc.push(max);\n    average_acc.push(avg);\n\n\n    return [\n        min,\n        max,\n        avg\n    ]\n}\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);